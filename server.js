// ===== SERVIDOR PRINCIPAL V10.0 - COM SISTEMA DE LOGIN =====
const express = require('express');
const { setupMiddleware } = require('./src/middleware/setup');
const { setupRoutes } = require('./src/routes/index');
const { loadEnvironment, validateConfiguration } = require('./src/config/environment');
const { initializeServices } = require('./src/services/initialize');

// ===== NOVOS IMPORTS PARA AUTENTICA√á√ÉO =====
const { setupAuthRoutes } = require('./src/middleware/auth');
const { authPageMiddleware, setupLoginRoute } = require('./src/middleware/auth-middleware');

async function startServer() {
    try {
        console.log('\nüöÄ INICIANDO SERVIDOR V10.0 - COM SISTEMA DE LOGIN');
        console.log('=========================================================');
        
        // ===== CARREGAR CONFIGURA√á√ïES =====
        const config = loadEnvironment();
        const validation = validateConfiguration(config);
        
        if (!validation.valid) {
            console.log('‚ö†Ô∏è Configura√ß√£o com problemas, mas continuando...');
            validation.errors.forEach(error => console.log(`   ‚ùå ${error}`));
        }
        
        // ===== CRIAR APP EXPRESS =====
        const app = express();
        const PORT = config.PORT || 3001;
        
        // ===== CONFIGURAR MIDDLEWARE B√ÅSICO =====
        setupMiddleware(app);
        
        // ===== üîê NOVO: CONFIGURAR AUTENTICA√á√ÉO =====
        console.log('üîê Configurando sistema de autentica√ß√£o...');
        
        // Middleware de autentica√ß√£o para p√°ginas
        app.use(authPageMiddleware);
        
        // Rotas de autentica√ß√£o
        setupAuthRoutes(app);
        
        // Rota de login
        setupLoginRoute(app);
        
        console.log('‚úÖ Sistema de autentica√ß√£o configurado!');
        
        // ===== INICIALIZAR SERVI√áOS =====
        await initializeServices(config);
        
        // ===== CONFIGURAR ROTAS EXISTENTES =====
        setupRoutes(app);
        
        // ===== INICIAR SERVIDOR =====
        const server = app.listen(PORT, () => {
            console.log('\n‚úÖ SERVIDOR V10.0 INICIADO COM SUCESSO!');
            console.log('=====================================');
            console.log(`üì° Rodando em: http://localhost:${PORT}`);
            console.log(`üåç Ambiente: ${process.env.NODE_ENV || 'development'}`);
            console.log(`‚è∞ Iniciado em: ${new Date().toLocaleString('pt-BR')}`);
            
            console.log('\nüîê SISTEMA DE LOGIN V10.0 ATIVO:');
            console.log('   üö™ Login via email + token (Resend)');
            console.log('   üë§ Login via usu√°rio/senha');
            console.log('   üïí Sess√µes de 24 horas');
            console.log('   üîí Prote√ß√£o autom√°tica de p√°ginas');
            console.log('   üö™ Logout autom√°tico');
            
            console.log('\nüìã FUNCIONALIDADES V10.0 ATIVAS:');
            console.log('   üöÄ Sistema h√≠brido completo');
            console.log('   üì§ SocialBu m√≠dia upload CORRIGIDO');
            console.log('   üìÖ SocialBu sincroniza√ß√£o de posts agendados');
            console.log('   üçΩÔ∏è Chef Alex Cuca integrada');
            console.log('   üìä Analytics com dados reais');
            console.log('   üì± Interface completa');
            console.log('   üèÜ Top V√≠deos h√≠brido (12 redes)');
            console.log('   üîê Sistema de login completo');
            
            console.log('\nüîó LINKS PRINCIPAIS:');
            console.log(`   üîê Login: http://localhost:${PORT}/login.html`);
            console.log(`   üè† In√≠cio: http://localhost:${PORT}`);
            console.log(`   üìÖ Calend√°rio: http://localhost:${PORT}/calendar.html`);
            console.log(`   üìä Analytics: http://localhost:${PORT}/analytics.html`);
            console.log(`   üèÜ Top V√≠deos: http://localhost:${PORT}/top-videos.html`);
            console.log(`   ‚öôÔ∏è Config: http://localhost:${PORT}/config.html`);
            
            console.log('\nüõ†Ô∏è APIS V10.0 DISPON√çVEIS:');
            console.log(`   üìã Status: http://localhost:${PORT}/api/status`);
            console.log(`   üîê Auth Status: http://localhost:${PORT}/api/auth/status`);
            console.log(`   üìß Send Token: POST /api/auth/send-token`);
            console.log(`   ‚úÖ Verify Session: GET /api/auth/verify-session`);
            console.log(`   üö™ Logout: POST /api/auth/logout`);
            console.log(`   üìÖ Posts SocialBu: http://localhost:${PORT}/api/socialbu/scheduled-posts`);
            console.log(`   üîÑ Sync SocialBu: http://localhost:${PORT}/api/socialbu/sync-scheduled`);
            console.log(`   üèÜ Top Videos: http://localhost:${PORT}/api/get-all-top-videos`);
            
            console.log('\nüéØ CONFIGURA√á√ÉO DE LOGIN:');
            console.log('   üìß Emails permitidos:');
            console.log('      - admin@socialmedia.com');
            console.log('      - user@test.com');
            console.log('      - demo@demo.com');
            console.log('   üë§ Usu√°rios demo:');
            console.log('      - admin / admin123');
            console.log('      - user / user123');
            console.log('      - demo / demo123');
            
            if (process.env.RESEND_API_KEY) {
                console.log('   ‚úÖ Resend configurado - emails reais');
            } else {
                console.log('   üé≠ Resend n√£o configurado - emails simulados');
                console.log('   üí° Para emails reais: npm install resend');
                console.log('   üí° Adicione RESEND_API_KEY no .env');
            }
            
            console.log('\nüåê DEPLOY VERCEL:');
            console.log('   üìÑ vercel.json configurado');
            console.log('   üîß Comandos: npm run build, vercel deploy');
            console.log('   ‚öôÔ∏è Env vars: copiar .env para Vercel');
        });
        
        // ===== TRATAMENTO DE ERROS =====
        server.on('error', (error) => {
            if (error.code === 'EADDRINUSE') {
                console.error(`‚ùå Porta ${PORT} j√° est√° em uso!`);
                console.log('üí° Solu√ß√µes:');
                console.log('   1. Pare outros servidores na porta 3001');
                console.log('   2. Use uma porta diferente: PORT=3002 npm start');
                process.exit(1);
            } else {
                console.error('‚ùå Erro no servidor:', error);
                process.exit(1);
            }
        });
        
        // ===== GRACEFUL SHUTDOWN =====
        process.on('SIGINT', () => {
            console.log('\nüõë Parando servidor V10.0...');
            server.close(() => {
                console.log('‚úÖ Servidor parado com seguran√ßa');
                process.exit(0);
            });
        });
        
        process.on('SIGTERM', () => {
            console.log('\nüõë SIGTERM recebido, parando servidor...');
            server.close(() => {
                console.log('‚úÖ Servidor parado com seguran√ßa');
                process.exit(0);
            });
        });
        
        // ===== TRATAMENTO DE EXCE√á√ïES =====
        process.on('uncaughtException', (error) => {
            console.error('‚ùå Exce√ß√£o n√£o capturada:', error);
            console.log('üîÑ Reinicie o servidor para garantir estabilidade');
        });
        
        process.on('unhandledRejection', (reason, promise) => {
            console.error('‚ùå Promise rejeitada n√£o tratada:', reason);
            console.log('Promise:', promise);
        });
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico ao iniciar servidor V10.0:', error);
        process.exit(1);
    }
}

// ===== INICIAR SERVIDOR =====
if (require.main === module) {
    startServer().catch(error => {
        console.error('‚ùå Falha ao iniciar servidor:', error);
        process.exit(1);
    });
}

module.exports = { startServer };